{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alan Andre Sanchez H\\\\Downloads\\\\front-challenge\\\\A\\\\retofront\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from \"react\";\nimport Moveable from \"react-moveable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [moveables, setMoveables] = useState([]);\n  const [selected, setSelected] = useState(null);\n  const addMoveable = async () => {\n    const COLORS = [\"red\", \"blue\", \"yellow\", \"green\", \"purple\"];\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/photos/\" + Math.floor(Math.random() * 100) + 1);\n    const data = await response.json();\n    setMoveables([...moveables, {\n      id: Math.floor(Math.random() * Date.now()),\n      top: 0,\n      left: 0,\n      width: 100,\n      height: 100,\n      backgroundImage: `url(${data.url})`,\n      updateEnd: true\n    }]);\n  };\n  const updateMoveable = function (id, newMoveable) {\n    let updateEnd = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const updatedMoveables = moveables.map(moveable => moveable.id === id ? {\n      ...moveable,\n      ...newMoveable,\n      updateEnd\n    } : moveable);\n    setMoveables(updatedMoveables);\n  };\n  const handleResizeStart = (index, e) => {\n    console.log(\"e\", e.direction);\n    // Check if the resize is coming from the left handle\n    const [handlePosX, handlePosY] = e.direction;\n    // 0 => center\n    // -1 => top or left\n    // 1 => bottom or right\n\n    // -1, -1\n    // -1, 0\n    // -1, 1\n    if (handlePosX === -1) {\n      console.log(\"width\", moveables, e);\n      // Save the initial left and width values of the moveable component\n      const initialLeft = e.left;\n      const initialWidth = e.width;\n\n      // Set up the onResize event handler to update the left value based on the change in width\n      e.setOrigin([\"%\", \"%\"]).on(\"resize\", _ref => {\n        let {\n          width\n        } = _ref;\n        const newLeft = initialLeft - (width - initialWidth) / 2;\n        updateMoveable(e.target.id, {\n          left: newLeft,\n          width\n        }, false);\n      });\n      const handleResizeEnd = (index, e) => {\n        // Mark the moveable component as updated\n        updateMoveable(e.target.id, {}, true);\n      };\n      const handleSelect = (index, e) => {\n        setSelected(index);\n      };\n      const handleDeselect = () => {\n        setSelected(null);\n      };\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addMoveable,\n          children: \"Add Moveable\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), moveables.map((moveable, index) => /*#__PURE__*/_jsxDEV(Moveable, {\n          target: `${moveable}-${moveable.id}`,\n          resizable: true,\n          rotatable: true,\n          origin: false,\n          onResizeStart: e => handleResizeStart(index, e),\n          onDragStart: () => setSelected(moveable.id),\n          onDragEnd: _ref2 => {\n            let {\n              set\n            } = _ref2;\n            return updateMoveable(moveable.id, {\n              top: set.top,\n              left: set.left\n            });\n          },\n          onResizeEnd: _ref3 => {\n            let {\n              size\n            } = _ref3;\n            return updateMoveable(moveable.id, {\n              width: size.width,\n              height: size.height\n            }, true);\n          }\n        }, moveable.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 12\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this);\n    }\n  };\n};\n_s(App, \"ki7TDVP8PBydvsVNfwn0H+nIY0k=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useRef","useState","useEffect","Moveable","jsxDEV","_jsxDEV","App","_s","moveables","setMoveables","selected","setSelected","addMoveable","COLORS","response","fetch","Math","floor","random","data","json","id","Date","now","top","left","width","height","backgroundImage","url","updateEnd","updateMoveable","newMoveable","arguments","length","undefined","updatedMoveables","map","moveable","handleResizeStart","index","e","console","log","direction","handlePosX","handlePosY","initialLeft","initialWidth","setOrigin","on","_ref","newLeft","target","handleResizeEnd","handleSelect","handleDeselect","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","resizable","rotatable","origin","onResizeStart","onDragStart","onDragEnd","_ref2","set","onResizeEnd","_ref3","size","_c","$RefreshReg$"],"sources":["C:/Users/Alan Andre Sanchez H/Downloads/front-challenge/A/retofront/src/App.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport Moveable from \"react-moveable\";\n\nconst App = () => {\n  const [moveables, setMoveables] = useState([]);\n  const [selected, setSelected] = useState(null);\n\n  const addMoveable = async () => {\n    const COLORS = [\"red\", \"blue\", \"yellow\", \"green\", \"purple\"];\n\n    const response = await fetch(\n      \"https://jsonplaceholder.typicode.com/photos/\" +\n      Math.floor(Math.random() * 100) +\n      1\n    );\n    const data = await response.json();\n\n    setMoveables([\n      ...moveables,\n      {\n        id: Math.floor(Math.random() * Date.now()),\n        top: 0,\n        left: 0,\n        width: 100,\n        height: 100,\n        backgroundImage: `url(${data.url})`,\n        updateEnd: true,\n      },\n    ]);\n  };\n\n  const updateMoveable = (id, newMoveable, updateEnd = false) => {\n    const updatedMoveables = moveables.map((moveable) =>\n      moveable.id === id ? { ...moveable, ...newMoveable, updateEnd } : moveable\n    );\n    setMoveables(updatedMoveables);\n  };\n\n  const handleResizeStart = (index, e) => {\n    console.log(\"e\", e.direction);\n    // Check if the resize is coming from the left handle\n    const [handlePosX, handlePosY] = e.direction;\n    // 0 => center\n    // -1 => top or left\n    // 1 => bottom or right\n\n    // -1, -1\n    // -1, 0\n    // -1, 1\n    if (handlePosX === -1) {\n      console.log(\"width\", moveables, e);\n      // Save the initial left and width values of the moveable component\n      const initialLeft = e.left;\n      const initialWidth = e.width;\n\n      // Set up the onResize event handler to update the left value based on the change in width\n      e.setOrigin([\"%\", \"%\"]).on(\"resize\", ({ width }) => {\n        const newLeft = initialLeft - (width - initialWidth) / 2;\n        updateMoveable(e.target.id, { left: newLeft, width }, false);\n      });\n      const handleResizeEnd = (index, e) => {\n        // Mark the moveable component as updated\n        updateMoveable(e.target.id, {}, true);\n      };\n\n      const handleSelect = (index, e) => {\n        setSelected(index);\n      };\n\n      const handleDeselect = () => {\n        setSelected(null);\n      };\n\n      return (\n        <div className=\"App\">\n          <button onClick={addMoveable}>Add Moveable</button>\n          {moveables.map((moveable, index) => (\n           <Moveable\n           key={moveable.id}\n           target={`${moveable}-${moveable.id}`}\n           resizable={true}\n           rotatable={true}\n           origin={false}\n           onResizeStart={(e) => handleResizeStart(index, e)}\n           onDragStart={() => setSelected(moveable.id)}\n           onDragEnd={({ set }) =>\n             updateMoveable(moveable.id, { top: set.top, left: set.left })\n           }\n           onResizeEnd={({ size }) =>\n             updateMoveable(moveable.id, { width: size.width, height: size.height }, true)\n           }\n         />\n         \n        ))}\n        </div>\n      );\n          }\n        }\n    };\n\n    export default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}