{"ast":null,"code":"/*\nCopyright (c) 2019 Daybrush\nname: css-to-mat\nlicense: MIT\nauthor: Daybrush\nrepository: git+https://github.com/daybrush/css-to-mat.git\nversion: 1.0.3\n*/\nimport { splitBracket, splitComma, splitUnit, isArray, splitSpace } from '@daybrush/utils';\nimport { calculate, matrix3d, invert, translate3d, scale3d, rotateZ3d, rotateX3d, rotateY3d } from '@scena/matrix';\nfunction createMatrix() {\n  return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n}\nfunction parseMat(transform) {\n  return toMat(parse(transform));\n}\nfunction getElementMatrix(el) {\n  return parseMat(getComputedStyle(el).transform);\n}\nfunction calculateMatrixDist(matrix, pos) {\n  var res = calculate(matrix, [pos[0], pos[1] || 0, pos[2] || 0, 1], 4);\n  var w = res[3] || 1;\n  return [res[0] / w, res[1] / w, res[2] / w];\n}\nfunction getDistElementMatrix(el, container) {\n  if (container === void 0) {\n    container = document.body;\n  }\n  var target = el;\n  var matrix = createMatrix();\n  while (target) {\n    var transform = getComputedStyle(target).transform;\n    matrix = matrix3d(parseMat(transform), matrix);\n    if (target === container) {\n      break;\n    }\n    target = target.parentElement;\n  }\n  matrix = invert(matrix, 4);\n  matrix[12] = 0;\n  matrix[13] = 0;\n  matrix[14] = 0;\n  return matrix;\n}\nfunction toMat(matrixInfos) {\n  var target = createMatrix();\n  matrixInfos.forEach(function (info) {\n    var matrixFunction = info.matrixFunction,\n      functionValue = info.functionValue;\n    if (!matrixFunction) {\n      return;\n    }\n    target = matrixFunction(target, functionValue);\n  });\n  return target;\n}\nfunction parse(transform) {\n  var transforms = isArray(transform) ? transform : splitSpace(transform);\n  return transforms.map(function (t) {\n    var _a = splitBracket(t),\n      name = _a.prefix,\n      value = _a.value;\n    var matrixFunction = null;\n    var functionName = name;\n    var functionValue = \"\";\n    if (name === \"translate\" || name === \"translateX\" || name === \"translate3d\") {\n      var _b = splitComma(value).map(function (v) {\n          return parseFloat(v);\n        }),\n        posX = _b[0],\n        _c = _b[1],\n        posY = _c === void 0 ? 0 : _c,\n        _d = _b[2],\n        posZ = _d === void 0 ? 0 : _d;\n      matrixFunction = translate3d;\n      functionValue = [posX, posY, posZ];\n    } else if (name === \"translateY\") {\n      var posY = parseFloat(value);\n      matrixFunction = translate3d;\n      functionValue = [0, posY, 0];\n    } else if (name === \"translateZ\") {\n      var posZ = parseFloat(value);\n      matrixFunction = translate3d;\n      functionValue = [0, 0, posZ];\n    } else if (name === \"scale\" || name === \"scale3d\") {\n      var _e = splitComma(value).map(function (v) {\n          return parseFloat(v);\n        }),\n        sx = _e[0],\n        _f = _e[1],\n        sy = _f === void 0 ? sx : _f,\n        _g = _e[2],\n        sz = _g === void 0 ? 1 : _g;\n      matrixFunction = scale3d;\n      functionValue = [sx, sy, sz];\n    } else if (name === \"scaleX\") {\n      var sx = parseFloat(value);\n      matrixFunction = scale3d;\n      functionValue = [sx, 1, 1];\n    } else if (name === \"scaleY\") {\n      var sy = parseFloat(value);\n      matrixFunction = scale3d;\n      functionValue = [1, sy, 1];\n    } else if (name === \"scaleZ\") {\n      var sz = parseFloat(value);\n      matrixFunction = scale3d;\n      functionValue = [1, 1, sz];\n    } else if (name === \"rotate\" || name === \"rotateZ\" || name === \"rotateX\" || name === \"rotateY\") {\n      var _h = splitUnit(value),\n        unit = _h.unit,\n        unitValue = _h.value;\n      var rad = unit === \"rad\" ? unitValue : unitValue * Math.PI / 180;\n      if (name === \"rotate\" || name === \"rotateZ\") {\n        functionName = \"rotateZ\";\n        matrixFunction = rotateZ3d;\n      } else if (name === \"rotateX\") {\n        matrixFunction = rotateX3d;\n      } else if (name === \"rotateY\") {\n        matrixFunction = rotateY3d;\n      }\n      functionValue = rad;\n    } else if (name === \"matrix3d\") {\n      matrixFunction = matrix3d;\n      functionValue = splitComma(value).map(function (v) {\n        return parseFloat(v);\n      });\n    } else if (name === \"matrix\") {\n      var m = splitComma(value).map(function (v) {\n        return parseFloat(v);\n      });\n      matrixFunction = matrix3d;\n      functionValue = [m[0], m[1], 0, 0, m[2], m[3], 0, 0, 0, 0, 1, 0, m[4], m[5], 0, 1];\n    } else {\n      functionName = \"\";\n    }\n    return {\n      name: name,\n      functionName: functionName,\n      value: value,\n      matrixFunction: matrixFunction,\n      functionValue: functionValue\n    };\n  });\n}\nexport { calculateMatrixDist, createMatrix, getDistElementMatrix, getElementMatrix, parse, parseMat, toMat };","map":{"version":3,"names":["createMatrix","parseMat","transform","toMat","parse","getElementMatrix","el","getComputedStyle","calculateMatrixDist","matrix","pos","res","calculate","w","getDistElementMatrix","container","document","body","target","matrix3d","parentElement","invert","matrixInfos","forEach","info","matrixFunction","functionValue","transforms","isArray","splitSpace","map","t","_a","splitBracket","name","prefix","value","functionName","_b","splitComma","v","posX","_c","posY","_d","posZ","translate3d","parseFloat","_e","sx","_f","sy","_g","sz","scale3d","_h","splitUnit","unit","unitValue","rad","Math","PI","rotateZ3d","rotateX3d","rotateY3d","m"],"sources":["C:\\Users\\Alan Andre Sanchez H\\Downloads\\front-challenge\\A\\retofront\\node_modules\\css-to-mat\\src\\CssToMatrix.ts"],"sourcesContent":["import { splitComma, splitBracket, splitUnit, splitSpace, isArray } from \"@daybrush/utils\";\nimport { MatrixInfo } from \"./types\";\nimport { calculate, invert, matrix3d, rotateX3d, rotateY3d, rotateZ3d, scale3d, translate3d } from \"@scena/matrix\";\n\nexport function createMatrix() {\n    return [\n        1, 0, 0, 0,\n        0, 1, 0, 0,\n        0, 0, 1, 0,\n        0, 0, 0, 1,\n    ];\n}\nexport function parseMat(transform: string | string[]): number[] {\n    return toMat(parse(transform));\n}\nexport function getElementMatrix(el: HTMLElement) {\n    return parseMat(getComputedStyle(el).transform!);\n}\nexport function calculateMatrixDist(matrix: number[], pos: number[]) {\n    const res = calculate(matrix, [pos[0], pos[1] || 0, pos[2] || 0, 1], 4);\n    const w = res[3] || 1;\n\n    return [\n        res[0] / w,\n        res[1] / w,\n        res[2] / w,\n    ];\n}\nexport function getDistElementMatrix(el: HTMLElement, container = document.body): number[] {\n    let target: HTMLElement | null = el;\n    let matrix = createMatrix();\n\n    while (target) {\n        const transform = getComputedStyle(target).transform!;\n        matrix = matrix3d(parseMat(transform), matrix);\n\n        if (target === container) {\n            break;\n        }\n        target = target.parentElement;\n    }\n    matrix = invert(matrix, 4);\n\n    matrix[12] = 0;\n    matrix[13] = 0;\n    matrix[14] = 0;\n\n    return matrix;\n}\n\nexport function toMat(matrixInfos: MatrixInfo[]): number[] {\n    let target = createMatrix();\n\n    matrixInfos.forEach(info => {\n        const {\n            matrixFunction,\n            functionValue,\n        } = info;\n\n        if (!matrixFunction) {\n            return;\n        }\n        target = matrixFunction(target, functionValue);\n    });\n    return target;\n}\nexport function parse(transform: string | string[]): MatrixInfo[] {\n    const transforms = isArray(transform) ? transform : splitSpace(transform);\n\n    return transforms.map(t => {\n        const { prefix: name, value } = splitBracket(t);\n\n\n        let matrixFunction = null;\n        let functionName: string = name;\n        let functionValue: any = \"\";\n\n        if (name === \"translate\" || name === \"translateX\" || name === \"translate3d\") {\n            const [posX, posY = 0, posZ = 0] = splitComma(value!).map(v => parseFloat(v));\n\n            matrixFunction = translate3d;\n            functionValue = [posX, posY, posZ];\n        } else if (name === \"translateY\") {\n            const posY = parseFloat(value!);\n\n            matrixFunction = translate3d;\n            functionValue = [0, posY, 0];\n        } else if (name === \"translateZ\") {\n            const posZ = parseFloat(value!);\n\n            matrixFunction = translate3d;\n            functionValue = [0, 0, posZ];\n        } else if (name === \"scale\" || name === \"scale3d\") {\n            const [sx, sy = sx, sz = 1] = splitComma(value!).map(v => parseFloat(v)) as number[];\n\n            matrixFunction = scale3d;\n            functionValue = [sx, sy, sz];\n        } else if (name === \"scaleX\") {\n            const sx = parseFloat(value!);\n\n            matrixFunction = scale3d;\n            functionValue = [sx, 1, 1];\n        } else if (name === \"scaleY\") {\n            const sy = parseFloat(value!);\n\n            matrixFunction = scale3d;\n            functionValue = [1, sy, 1];\n        } else if (name === \"scaleZ\") {\n            const sz = parseFloat(value!);\n\n            matrixFunction = scale3d;\n            functionValue = [1, 1, sz];\n        } else if (name === \"rotate\" || name === \"rotateZ\" || name === \"rotateX\" || name === \"rotateY\") {\n            const { unit, value: unitValue } = splitUnit(value!);\n            const rad = unit === \"rad\" ? unitValue : unitValue * Math.PI / 180;\n\n            if (name === \"rotate\" || name === \"rotateZ\") {\n                functionName = \"rotateZ\";\n                matrixFunction = rotateZ3d;\n            } else if (name === \"rotateX\") {\n                matrixFunction = rotateX3d;\n            } else if (name === \"rotateY\") {\n                matrixFunction = rotateY3d;\n            }\n            functionValue = rad;\n        } else if (name === \"matrix3d\") {\n            matrixFunction = matrix3d;\n            functionValue = splitComma(value!).map(v => parseFloat(v));\n        } else if (name === \"matrix\") {\n            const m = splitComma(value!).map(v => parseFloat(v));\n            matrixFunction = matrix3d;\n            functionValue = [\n                m[0], m[1], 0, 0,\n                m[2], m[3], 0, 0,\n                0, 0, 1, 0,\n                m[4], m[5], 0, 1,\n            ];\n        } else {\n            functionName = \"\";\n        }\n        return {\n            name: name!,\n            functionName,\n            value: value!,\n            matrixFunction,\n            functionValue,\n        };\n    });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}